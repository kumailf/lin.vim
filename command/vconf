#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2018-  <linrongbin16@gmail.com>

import sys
import getopt
import os
import time
import shutil

sys.path.append(".")
import util


def _help():
    msg = """usage: vconf [option]

  Quicker configurations.

option:
  -c/--clangd                           configure 'compile_commands.json' for clangd
                                        configure 'compile_flags.txt' otherwise if
                                        'CMakeLists.txt' not available or on Windows
                                        Visual Studio toolchain
  -s/--sshkey [email]                   configure '~/.ssh/id_rsa' and '~/.ssh/id_rsa.pub'
                                        for email

  -b/--brew                             configure homebrew mirrors for China
  -p/--pip                              configure python3 pip mirrors for China
  -n/--npm                              configure nodejs npm mirrors for China
  -u/--ubuntu                           configure ubuntu mirrors for China
  -d/--debian                           configure debian mirrors for China
  -m/--manjaro                          configure manjaro mirrors for China
  -f/--fedora                           configure fedora mirrors for China

  -h/--help                             show help message

example:
  $ vconf -s linrongbin16@outlook.com
  Generating public/private rsa key pair.
  Enter file in which to save the key (/Users/linrongbin/.ssh/id_rsa):
  Enter passphrase (empty for no passphrase):
  Enter same passphrase again:
  Your identification has been saved in /Users/linrongbin/.ssh/id_rsa
  Your public key has been saved in /Users/linrongbin/.ssh/id_rsa.pub
  The key fingerprint is:
  SHA256:LiSwQUBzThXXXXXXXXXXXXXXXXXXXXHQxTNow3o61W8 linrongbin16@outlook.com
  The key's randomart image is:
  +---[RSA 4096]----+
  |XXXXXXXXXX       |
  | XXXXXXXXXX      |
  |  XXXXXXXXXX     |
  |   XXXXXXXX      |
  |  XXXXXXXXX      |
  |     XXXXXXX     |
  |      XXXXX      |
  |       X         |
  |                 |
  +----[SHA256]-----+
"""
    print(msg)
    exit(0)


def is_ascii_char(s):
    return all(ord(c) < 128 for c in s)


def header_path(s):
    if util.is_windows():
        return '-I"%s"' % (s)
    else:
        return "-I%s" % (s)


def os_listdir_wrapper(d):
    try:
        return os.listdir(d)
    except:
        return []


def git_repo_headers():
    try:
        root, _ = util.run("git", "rev-parse", "--show-toplevel")
        root = root[0].strip()
        hds = util.list_dirs(root, False, 3)
        return [header_path(x) for x in hds]
    except:
        return []


def windows_sdk_headers():
    hds = []
    # -I"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.14.26428\\include"
    for release in os_listdir_wrapper(
        "C:\\Program Files (x86)\\Microsoft Visual Studio\\"
    ):
        current_release = (
            "C:\\Program Files (x86)\\Microsoft Visual Studio\\%s\\Community\\VC\\Tools\\MSVC\\"
            % (release)
        )
        if not os.path.exists(current_release):
            continue
        if not os.path.isdir(current_release):
            continue
        for version in os_listdir_wrapper(current_release):
            current_version = (
                "C:\\Program Files (x86)\\Microsoft Visual Studio\\%s\\Community\\VC\\Tools\\MSVC\\%s\\include"
                % (release, version)
            )
            if not os.path.exists(current_version) or not os.path.isdir(
                current_version
            ):
                continue
            hds.append(header_path(current_version))
    # -I"C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17134.0\\ucrt"
    for version in os_listdir_wrapper(
        "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\"
    ):
        current_version = (
            "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\%s\\ucrt" % (version)
        )
        if not os.path.exists(current_version) or not os.path.isdir(current_version):
            continue
        hds.append(header_path(current_version))
    # C:\\Program Files\\LLVM headers
    win_clang_list = [
        "C:\\Program Files\\LLVM\\include\\clang-c",
        "C:\\Program Files\\LLVM\\include\\llvm",
        "C:\\Program Files\\LLVM\\include\\llvm-c",
    ]
    for hd in win_clang_list:
        if not os.path.exists(hd) or not os.path.isdir(hd):
            continue
        hds.append(header_path(hd))
    return hds


def current_headers():
    hds = []
    hds.append(header_path("."))
    for f in util.list_files(".", False, 3):
        hds.append(header_path(f))
    return hds


def _compile_commands():
    gen_folder = ".vconf.%s" % (str(time.time()))
    os.system("cmake -B %s -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ." % (gen_folder))
    if not os.path.exists("%s/compile_commands.json" % (gen_folder)):
        raise Exception("%s/compile_commands.json not exist" % (gen_folder))
    shutil.copyfile("%s/compile_commands.json" % (gen_folder), "compile_commands.json")
    shutil.rmtree(gen_folder, ignore_errors=True)
    print("'compile_commands.json' generated")


def _compile_flags():
    fp = open("compile_flags.txt", "w")
    c = current_headers()
    w = windows_sdk_headers()
    g = git_repo_headers()
    for x in c:
        fp.write(x + "\n")
    for x in w:
        fp.write(x + "\n")
    for x in g:
        fp.write(x + "\n")
    fp.close()
    print("'compile_flags.txt' generated")


def _clangd():
    if util.is_windows() or not os.path.exists("CMakeLists.txt"):
        _compile_flags()
    else:
        _compile_commands()
    exit(0)


def _sshkey(email):
    os.system("ssh-keygen -t rsa -b 4096 -C '%s'" % email)
    os.system("touch ~/.ssh/authorized_keys")
    os.system("chmod -R 700 ~/.ssh")
    os.system("chmod 600 ~/.ssh/authorized_keys")
    os.system("chmod 600 ~/.ssh/id_rsa")
    os.system("chmod 600 ~/.ssh/id_rsa.pub")
    exit(0)


def _brew_mirror():
    mirrors = [
        'git -C "$(brew --repo)" remote set-url origin https://mirrors.ustc.edu.cn/brew.git',
        'git -C "$(brew --repo homebrew/core)" remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git',
        'git -C "$(brew --repo homebrew/cask)" remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git',
    ]
    for cmd in mirrors:
        os.system(cmd)
    exit(0)


def _pip3_mirror():
    mirrors = [
        "pip3 config set global.index-url https://mirrors.ustc.edu.cn/pypi/web/simple",
    ]
    for cmd in mirrors:
        os.system(cmd)
    exit(0)


def _npm_mirror():
    mirrors = [
        "npm config set registry https://registry.npm.taobao.org",
    ]
    for cmd in mirrors:
        os.system(cmd)
    exit(0)


def _ubuntu_mirror():
    print(
        "[vcmd] replace 'archive.ubuntu/com' to 'mirrors.ustc.edu.cn' in /etc/apt/sources.list"
    )
    util.backup_file("/etc/apt/sources.list")
    if os.path.exists("/etc/apt/source.list"):
        replace_cmd = "sudo sed -i 's/archive.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/sources.list"
        os.system(replace_cmd)
    print(
        "[vcmd] for ubuntu version focal(20.04) bionic(18.04) artful(17.10) xenial(16.04) trusty(14.04)"
    )
    print("[vcmd] you could also manually edit source.list like below")
    mirror_content = """
# [vcmd] replace xenial with other ubuntu version for your needs
deb https://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse
# deb-src https://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse
deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse
# deb-src https://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse
deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse
# deb-src https://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse
deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse
# deb-src https://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse

# proposed repos not recommended
# deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse
# deb-src https://mirrors.ustc.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse
"""
    print(mirror_content)
    print(
        "[vcmd] please see http://mirrors.ustc.edu.cn/help/ubuntu.html for more details"
    )
    exit(0)


def _debian_mirror():
    print(
        "[vcmd] replace 'deb.debian.org' to 'mirrors.ustc.edu.cn' in /etc/apt/sources.list"
    )
    util.backup_file("/etc/apt/sources.list")
    if os.path.exists("/etc/apt/source.list"):
        replace_cmd = (
            "sudo sed -i 's/deb.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.list"
        )
        os.system(replace_cmd)
    print("[vcmd] you could also manually edit source.list like below")
    mirror_content = """
deb http://mirrors.ustc.edu.cn/debian stable main contrib non-free
# deb-src http://mirrors.ustc.edu.cn/debian stable main contrib non-free
deb http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-free
# deb-src http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-free

# proposed repos not recommended
# deb http://mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-free
# deb-src http://mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-free
"""
    print(mirror_content)
    print(
        "[vcmd] please see http://mirrors.ustc.edu.cn/help/debian.html for more details"
    )
    exit(0)


def _fedora_mirror():
    print(
        "[vcmd] replace fedora.repo fedora-modular.repo fedora-updates.repo fedora-updates-modular.repo in /etc/yum.repos.d/"
    )
    replace_cmd = """sudo sed -e 's|^metalink=|#metalink=|g' \\
         -e 's|^#baseurl=http://download.fedoraproject.org/pub/fedora/linux|baseurl=https://mirrors.ustc.edu.cn/fedora|g' \\
         -i.bak \\
         /etc/yum.repos.d/fedora.repo \\
         /etc/yum.repos.d/fedora-modular.repo \\
         /etc/yum.repos.d/fedora-updates.repo \\
         /etc/yum.repos.d/fedora-updates-modular.repo"""
    print(replace_cmd)
    os.system(replace_cmd)
    print(
        "[vcmd] please see http://mirrors.ustc.edu.cn/help/fedora.html for more details"
    )
    exit(0)


def _manjaro_mirror():
    print("[vcmd] update manjaro mirror to China")
    update_mirror_cmd = "sudo pacman-mirrors -i -c China -m rank"
    refresh_mirror_cmd = "sudo pacman -Syy"
    os.system(update_mirror_cmd)
    os.system(refresh_mirror_cmd)
    exit(0)


if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "csbpnudmfh",
            [
                "clangd",
                "sshkey",
                "brew",
                "pip",
                "npm",
                "ubuntu",
                "debian",
                "manjaro",
                "fedora",
                "help",
            ],
        )
        for opt in opts:
            if opt[0] in ("-h", "--help"):
                continue
        for opt in opts:
            if opt[0] in ("-c", "--clangd"):
                _clangd()
            elif opt[0] in ("-s", "--sshkey"):
                _sshkey(args[0])
            elif opt[0] in ("-b", "--brew"):
                _brew_mirror()
            elif opt[0] in ("-p", "--pip"):
                _pip3_mirror()
            elif opt[0] in ("-n", "--npm"):
                _npm_mirror()
            elif opt[0] in ("-u", "--ubuntu"):
                _ubuntu_mirror()
            elif opt[0] in ("-d", "--debian"):
                _debian_mirror()
            elif opt[0] in ("-f", "--fedora"):
                _fedora_mirror()
            elif opt[0] in ("-m", "--manjaro"):
                _manjaro_mirror()
        _help()
    except getopt.GetoptError as e:
        print(e)
        _help()
    except Exception as e:
        print(e)
