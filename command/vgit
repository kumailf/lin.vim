#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2018-  <linrongbin16@gmail.com>

import sys
import os
import getopt
import datetime

sys.path.append(".")
import util

slash = "\\" if util.is_windows() else "/"
db = util.get_command_home() + slash + "git_proxy.db"


def _help():
    msg = """usage: vgit [option]

  Git quick operations.

option:
  -b/--branch [command]     branch operations, the commands are:
                              a/all             - show all git repository branches,
                                                  include local and remote
                              l/local           - show git repository local branches
                              r/remote          - show git repository remote branches
                              t/this            - show git repository current branch
                              c/create [branch] - create new local branch and move to it
                              m/move [branch]   - move to existing local branch
                              d/delete [branch] - delete local branch

  -pl/--pull                pull operation
  -ps/--push                push operation
  -f/--force                use with pull/push for overwrite

  -d/--discard              discard temporary changes
  --rebase [branch]         rebase to specified remote/branch
  --revert [n]              revert to last n commit(create new commit without push force),
                            by default 1
  --reset [n]               reset to last n commit(do not create new commit, have to push
                            force to overwrite remote), by default 1

  --proxy [command]         proxy configuration, the commands are:
                              c/config [proxy]  - configure proxy for git
                              s/show            - show git proxy configuration
                              e/enable          - enable git proxy configuration
                              d/disable         - disable git proxy configuration

  -h/--help                 show help message

example:
  $ vgit -ps
  [vcmd] detected remote repositories: 'origin'[0]
  [vcmd] choose remote repository 0, by default: 'origin'[0]:
  [vcmd] choose branch, by default: 'master':
  [vcmd] enter comment: optimize vgit
  [vcmd] git push to origin/master with 'optimize vgit', yes? y
  [master 3666d83] optimize vgit
   1 file changed, 74 insertions(+), 121 deletions(-)
  Enumerating objects: 7, done.
  Counting objects: 100% (7/7), done.
  Delta compression using up to 12 threads
  Compressing objects: 100% (4/4), done.
  Writing objects: 100% (4/4), 1.42 KiB | 1.42 MiB/s, done.
  Total 4 (delta 3), reused 0 (delta 0)
  remote: Resolving deltas: 100% (3/3), completed with 3 local objects.
  To https://github.com/linrongbin16/lin.vim
     31e5da9..3666d83  master -> master
"""
    print(msg)
    exit(0)


def _branch_show(opt):
    util.check_git_repository()
    outs = []
    if opt.startswith("a"):
        outs, _ = util.run("git", "branch", "-a")
    elif opt.startswith("l"):
        outs, _ = util.run("git", "branch")
    elif opt.startswith("r"):
        outs, _ = util.run("git", "branch", "-r")
    elif opt.startswith("t"):
        outs, _ = util.run("git", "rev-parse", "--abbrev-ref", "HEAD")
    for o in outs:
        print(o.strip())
    exit(0)


def _branch_create(name):
    util.check_git_repository()
    os.system("git checkout -b %s" % (name))
    exit(0)


def _branch_move(name):
    util.check_git_repository()
    os.system("git checkout %s" % (name))
    exit(0)


def _branch_delete(name):
    util.check_git_repository()
    os.system("git branch -d %s" % (name))
    exit(0)


def _pull(force):
    util.check_git_repository()
    remote_count = util.get_git_remote_repository_count()
    if remote_count <= 0:
        print("[vcmd] remote git repository not exist!")
        exit(3)
    repo = util.get_git_remote_repository()
    branch = util.get_git_remote_branch()
    print("[vcmd] git pull from %s/%s" % (repo, branch))
    os.system("git fetch")
    os.system("git pull %s %s %s" % ("--force" if force else "", repo, branch))
    exit(0)


def _push(force):
    util.check_git_repository()
    remote_count = util.get_git_remote_repository_count()
    if remote_count <= 0:
        print("[vcmd] remote git repository not exist!")
        exit(3)
    repo = util.get_git_remote_repository()
    branch = util.get_git_remote_branch()
    comment = input("[vcmd] enter comment: ")
    comment = (
        "[vcmd] git push at %s"
        % (datetime.datetime.now().strftime("%Y/%m/%d %H:%M:%S"))
        if util.is_empty_str(comment)
        else comment
    )
    util.check_user_confirm(
        "[vcmd] git push to %s/%s with '%s', yes? " % (repo, branch, comment)
    )
    os.chdir(util.get_git_root())
    os.system("git add -A .")
    os.system('git commit -m "%s"' % (comment))
    os.system("git push %s %s %s" % ("--force" if force else "", repo, branch))
    exit(0)


def _discard():
    util.check_git_repository()
    save_dir = os.getcwd()
    os.chdir(util.get_git_root())
    modifies = util.get_git_modified_files()
    untracts = util.get_git_untract_files()
    file_list = modifies + untracts
    for i in file_list:
        if i in modifies:
            print("[vcmd] discard: %s" % (i + " "))
            os.system("git checkout %s" % (i + " "))
        elif i in untracts:
            print("[vcmd] remove: %s" % (i + " "))
            os.system("rm %s" % (i + " "))
    if os.path.exists(save_dir):
        os.chdir(save_dir)
    exit(0)


def _rebase(branch):
    util.check_git_repository()
    os.system("git rebase %s" % branch)
    exit(0)


def _revert(n):
    util.check_git_repository()
    branch = util.get_git_current_branch()
    commit = util.get_git_last_commit(n - 1)
    util.check_user_confirm(
        "[lin-boost] git revert to last '%d' commits '%s' on '%s', yes? "
        % (n, commit, branch)
    )
    save_dir = os.getcwd()
    os.chdir(util.get_git_root())
    os.system("git revert %s" % commit)
    if os.path.exists(save_dir):
        os.chdir(save_dir)
    exit(0)


def _reset(n):
    util.check_git_repository()
    branch = util.get_git_current_branch()
    commit = util.get_git_last_commit(n - 1)
    util.check_user_confirm(
        "[lin-boost] git revert to last '%d' commits '%s' on '%s', yes? "
        % (n, commit, branch)
    )
    save_dir = os.getcwd()
    os.chdir(util.get_git_root())
    os.system("git reset HEAD~%d" % n)
    if os.path.exists(save_dir):
        os.chdir(save_dir)
    exit(0)


def _config_proxy(p):
    util.write_file(db, p)
    exit(0)


def _print_proxy():
    gc = os.path.expanduser("~") + slash + ".gitconfig"
    proxies = util.readlines_file(gc)
    trigger = False
    saver = None
    for l in proxies:
        if trigger:
            print("[vcmd] .gitconfig: %s %s" % (saver, l.strip()))
            trigger = False
        if l.lower().find("http") >= 0:
            saver = l.strip()
            trigger = True
    print("[vcmd] git proxy: %s" % util.read_file(db))
    exit(0)


def _enable_proxy():
    proxy = util.read_file(db)
    if proxy is None:
        print("[vcmd] git proxy not configured yet, please try 'git -p <proxy>'")
        exit(0)
    httpcmd = "git config --global http.proxy %s" % proxy
    httpscmd = "git config --global https.proxy %s" % proxy
    os.system(httpcmd)
    os.system(httpscmd)
    exit(0)


def _disable_proxy():
    os.system("git config --global --unset https.proxy")
    os.system("git config --global --unset http.proxy")
    exit(0)


if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "b:dp:fh",
            [
                "branch=",
                "pull",
                "push",
                "discard",
                "rebase",
                "revert",
                "reset",
                "proxy=",
                "help",
            ],
        )
        force = False
        for opt in opts:
            if opt[0] in ("-h", "--help"):
                _help()
            if opt[0] in ("-f", "--force"):
                force = True
        for opt in opts:
            if opt[0] in ("-b", "--branch"):
                if opt[1] in ("a", "l", "r", "t", "all", "local", "remote", "this"):
                    _branch_show(opt[1])
                elif opt[1] in ("c", "create"):
                    _branch_create(args[0])
                elif opt[1] in ("m", "move"):
                    _branch_move(args[0])
                elif opt[1] in ("d", "delete"):
                    _branch_delete(args[0])
            elif opt[0] == "-p":
                if opt[1] == "l":
                    _pull(force)
                elif opt[1] == "s":
                    _push(force)
            elif opt[0] == "--pull":
                _pull(force)
            elif opt[0] == "--push":
                _push(force)
            elif opt[0] in ("-d", "--discard"):
                _discard()
            elif opt[0] in ("--rebase"):
                _rebase(args[0])
            elif opt[0] in ("--revert"):
                _revert(1 if len(args) < 1 else int(args[0]))
            elif opt[0] in ("--reset"):
                _reset(1 if len(args) < 1 else int(args[0]))
            elif opt[0] == "--proxy":
                if opt[1] in ("c", "config"):
                    _config_proxy(args[0])
                elif opt[1] in ("s", "show"):
                    _print_proxy()
                elif opt[1] in ("e", "enable"):
                    _enable_proxy()
                elif opt[1] in ("d", "disable"):
                    _disable_proxy()
        _help()
    except getopt.GetoptError as e:
        print(e)
        _help()
    except Exception as e:
        print(e)
